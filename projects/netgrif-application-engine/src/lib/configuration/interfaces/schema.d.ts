/* tslint:disable */
import {CaseSearchRequestBody} from '../../filter/models/case-search-request-body';
import {TaskSearchRequestBody} from '../../filter/models/task-search-request-body';
import {FilterType} from '../../filter/models/filter-type';
import {MergeOperator} from '../../filter/models/merge-operator';

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Resource = {
    name: string;
    address: string;
    format: string;
    openApi?: string;
}

export type Resources =
    | Resource
    | Array<Resource>;


/**
 * Schema for NAE
 */
export interface NetgrifApplicationEngine {
    extends?: string;
    providers: SetAuthAndResourcesAddress;
    theme: Theme;
    assets: any[];
    i18n?: any[];
    filters?: Filters;
    views: View;
    services?: Services;

    [k: string]: any;
}

export interface SetAuthAndResourcesAddress {
    auth: Auth;
    resources: Resources;

    [k: string]: any;
}

export interface Auth {
    address: string;
    authentication: string;
    sessionBearer?: string;
    endpoints?: string | { [k: string]: string };

    [k: string]: any;
}

export interface Theme {
    name: string;
    pallets: {
        light: {
            primary:
                string
                | {
                '50'?: string;
                '100'?: string;
                '200'?: string;
                '300'?: string;
                '400'?: string;
                '500'?: string;
                '600'?: string;
                '700'?: string;
                '800'?: string;
                '900'?: string;
                contrast?: { 'light': string[]; 'dark': string[]; };
                [k: string]: any;
            };
            secondary?:
                string
                | {
                '50'?: string;
                '100'?: string;
                '200'?: string;
                '300'?: string;
                '400'?: string;
                '500'?: string;
                '600'?: string;
                '700'?: string;
                '800'?: string;
                '900'?: string;
                contrast?: { 'light': string[]; 'dark': string[]; };
                [k: string]: any;
            };
            warn?:
                string
                | {
                '50'?: string;
                '100'?: string;
                '200'?: string;
                '300'?: string;
                '400'?: string;
                '500'?: string;
                '600'?: string;
                '700'?: string;
                '800'?: string;
                '900'?: string;
                contrast?: { 'light': string[]; 'dark': string[]; };
                [k: string]: any;
            };
            [k: string]: any;
        };
        dark?: {
            primary?:
                string
                | {
                '50'?: string;
                '100'?: string;
                '200'?: string;
                '300'?: string;
                '400'?: string;
                '500'?: string;
                '600'?: string;
                '700'?: string;
                '800'?: string;
                '900'?: string;
                contrast?: { 'light': string[]; 'dark': string[]; };
                [k: string]: any;
            };
            secondary?:
                string
                | {
                '50'?: string;
                '100'?: string;
                '200'?: string;
                '300'?: string;
                '400'?: string;
                '500'?: string;
                '600'?: string;
                '700'?: string;
                '800'?: string;
                '900'?: string;
                contrast?: { 'light': string[]; 'dark': string[]; };
                [k: string]: any;
            };
            warn?:
                string
                | {
                '50'?: string;
                '100'?: string;
                '200'?: string;
                '300'?: string;
                '400'?: string;
                '500'?: string;
                '600'?: string;
                '700'?: string;
                '800'?: string;
                '900'?: string;
                contrast?: { 'light': string[]; 'dark': string[]; };
                [k: string]: any;
            };
            [k: string]: any;
        };
        [k: string]: any;
    };

    [k: string]: any;
}

export interface Filters {
    /**
     * This interface was referenced by `Filter`'s JSON-Schema definition
     * via the `patternProperty` "^[a-zA-Z0-9_]+$".
     */
    [k: string]: Filter;
}

export interface Filter {
    title: string;
    access: string;
    query: CaseSearchRequestBody | TaskSearchRequestBody | Array<CaseSearchRequestBody> | Array<TaskSearchRequestBody>;
    type: FilterType;
    mergeOperator?: MergeOperator;
    [k: string]: any;
}

export interface View {
    layout: string;
    routes?: {
        /**
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^[a-zA-Z0-9_]+$".
         */
        [k: string]: Route;
    };

    [k: string]: any;
}

export interface Route {
    layout: {
        name: string;
        params?: {
            orientation?: string;
            [k: string]: any;
        };
        [k: string]: any;
    };
    access:
        | {
            [k: string]: any;
        }
        | ('public' | 'private');
    navigation:
        | boolean
        | {
            title?: string;
            icon?: string;
            [k: string]: any;
        };
    routes?: {
        /**
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^[a-zA-Z0-9_]+$".
         */
        [k: string]: Route;
    };

    [k: string]: any;
}

export interface Services {
    log?: {
        level?: string;
        logWithDate?: boolean;
        serializeExtraParams?: boolean;
        includeLogLevel?: boolean;
        publishers?: any[];
        [k: string]: any;
    };
    auth?: {
        logoutRedirect?: string;
    };

    [k: string]: any;
}
