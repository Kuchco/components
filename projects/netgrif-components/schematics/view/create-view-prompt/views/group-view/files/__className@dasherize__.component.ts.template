import {AfterViewInit, Component, ViewChild} from '@angular/core';
import {
    AbstractTaskView,
    CategoryFactory,
    ConfigTaskViewServiceFactory,
    defaultTaskSearchCategoriesFactory,
    NAE_BASE_FILTER,
    NAE_SEARCH_CATEGORIES,
    NAE_VIEW_ID_SEGMENT,
    NextGroupService,
    SearchService,
    SimpleFilter,
    TaskSearchCaseQuery,
    TaskViewService,
    ViewIdService,
} from '@netgrif/application-engine';
import {
    HeaderComponent,
} from '@netgrif/components';

const localTaskViewServiceFactory = (factory: ConfigTaskViewServiceFactory) => {
    return factory.create('<%= viewPath %>');
};

const baseFilterFactory = (nextGroupService: NextGroupService) => {
    const groupIds: Array<TaskSearchCaseQuery> = [];
    nextGroupService.groupOfUser.forEach(group => {
       groupIds.push({id: group.stringId});
    });
    return {
        filter: SimpleFilter.fromTaskQuery({case: groupIds})
    };
};

@Component({
    selector: '<%= prefix %>-<%= dasherize(className) %>',
    templateUrl: './<%= dasherize(className) %>.component.html',
    styleUrls: ['./<%= dasherize(className) %>.component.scss'],
    providers: [
        CategoryFactory,
        ConfigTaskViewServiceFactory,
        SearchService,
        {   provide: NAE_BASE_FILTER,
            useFactory: baseFilterFactory,
            deps: [NextGroupService]
        },
        {   provide: TaskViewService,
            useFactory: localTaskViewServiceFactory,
            deps: [ConfigTaskViewServiceFactory]},
        {   provide: NAE_VIEW_ID_SEGMENT,
            useValue: '<%= viewIdSegment %>'},
        ViewIdService,
        {provide: NAE_SEARCH_CATEGORIES, useFactory: defaultTaskSearchCategoriesFactory, deps: [CategoryFactory]},
    ]
})
export class <%= classify(className) %>Component extends AbstractTaskView implements AfterViewInit {

    @ViewChild('header') public taskHeaderComponent: HeaderComponent;

    constructor(taskViewService: TaskViewService) {
        super(taskViewService);

    }

    ngAfterViewInit(): void {
        this.initializeHeader(this.taskHeaderComponent);
    }
}
